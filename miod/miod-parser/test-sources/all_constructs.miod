# TODO add all correct final language syntax elements here
# comments line 2
## documentation comment line 1
## documentation comment line 2
@_annotation
@annot
@_build_tag {"abc"}
@rtti {false}
unit all_constructs

# comment
## doc
import unita
importall unitb

alias a = b
# comment
## doc
pub alias a$[a] = b$[a]
alias a$[a] = b$[a,c]
alias a$[a,b,c] = b$[a,c,d]
alias a$[a,b,c] = b


# test const
@_build_tag { "float_math" }
const pi_f: Float = 3.14

pub const pi = 3.14

#string literal test
const unit_name = "all_constructs"

#hex literal test
const hex_const = 0x1Dead_Beef
const int_const = 1_000_000

alias some_alias = int_const

cproc myproc()

## doc1
## doc2
pub cproc myproc(): Int

@_build_tag {"aa"}
pub cproc myproc(a: String, b: Int): Int

pub cproc proc_multiple_lines(a: String,
    b: Int,
    c: String): Int

@with_fields { a: "aa",
    b: true, c: 34 }
proc myproc()
endproc

proc myproc2(): Int
    3
endproc

proc myprocln(a: Int,
    b: Int,
    c: Double): Int
    3
    sum(a(b(3,
        4)))
endproc

pub proc myproc2(a: Int, b: Int): Int
    sum(a,b)
    let a=3
    let mut b=4
    self
    b = 7
    let c = D::s.n
    let e = D::s()
    let e = D::s(a)(b)
    let e = D::s(a).d(b)(c).
        e.f()
    k = w().k().n
    k().u = w().k().n
    g.d().e = w
    ## ignored docs
    h = retain a
    e = aa::bb
    e = cc
    # comments
    e = c(retain w, retain d)
endproc

proc newstruct()
    let a = Some {}
    let b = SomeB { "abc" }
    let b1 = SomeB1 { a }
    let c = SomeC { a: "asd", b: true,
        c: newstruct,
        d: myproc2(3,4) }
endproc

pub struct MyEmptyStruct
# comment
## orphaned docs
endstruct

pub struct MyStruct
    # comment
    ## orphaned docs
    @build
    pub mut x: Int, setter set_x
    pub mut x: Int, getter get_x
    pub mut x: Int, getter get_x, setter set_x
    pub mut x: Int, setter set_x, getter get_x

    # ---
    y: Int

endstruct

closure Abc()

# comment

closure Abc(a: Int)

## doc
@abc
closure Abc(a: Int, b: Int)

closure Abc(a: Int, b: Int): Int

pub closure Abc$[A,B](a: A, b: Map$[A,B$[A]]): B$[A]

pub struct MyStruct$[k,v]
endstruct

pub enum Days
    # comment
    Mon
    ## doc
    @build
    Tue

endenum

pub variant Value
    # aa
    Days
    ## ss
    @abc
    Int
endvariant

pub variant Value$[E]
    # aa
    Days
    ## ss
    @abc
    Int
    dd$[E]
    E
endvariant

#pub flags Attr
    # asasd
    ## sds
#    @aaa
#    Read
#    Write

#endflags

@build
proc sum$[A](a: A, b:A$[Int]):Map$[A, Int]
    for i in b
        # aaa
        call()
    endfor

    for i,v in b
        # aaa
        continue
        call()
    endfor

    for i,v in b()
        # aaa
        call()
        break
    endfor
endproc

@build
cproc AA::sum$[A](self, a: A, b:A$[Int]):shared Map$[shared A, shared Int]

# TODO match, if, while, closure expr